@page
@model AutoArsenal_App.Pages.Products.AddProductModel
@{
    ViewData["Title"] = "Add Product";
}

<!-- Address Bar -->
<div class="pagetitle">
    <h1>@ViewData["Title"]</h1>
    <nav aria-label="breadcrumb">
        <ol class="breadcrumb">
            <li class="breadcrumb-item active" aria-current="page">
                <a asp-page="../Index">Home</a>
            </li>
            <li class="breadcrumb-item active" aria-current="page">
                <a asp-page="/Products/AllProducts">Products</a>
            </li>
            <li class="breadcrumb-item active" aria-current="page">@ViewData["Title"]</li>
        </ol>
    </nav>
</div>

<!-- Error message -->
@if (TempData["ErrorOnServer"] != null)
{
    <div class="alert alert-danger alert-dismissible fade show" role="alert">
        Error: @TempData["ErrorOnServer"]
        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
    </div>
}
<!-- End Error message -->
<!-- Add Product Form -->
<section class="section">
    <div class="row">
        <div class="col-lg-12">
            <div class="card">
                <div class="card-header d-flex justify-content-between">
                    <h5 class="card-title">
                        New Product <span>| @DateTime.Now.ToString("MMM dd, yyyy")</span>
                    </h5>
                    <div class="d-flex align-items-center">
                        <button type="button" class="btn btn-secondary mx-1">Discard</button>
                        <form method="post" asp-page-handler="AddProduct" onsubmit="return validateAndSubmit()">
                            <input type="hidden" id="Product" asp-for="Product" />
                            <input type="hidden" id="ProductCategory" asp-for="ProductCategory" />
                            <button type="submit" class="btn btn-primary mx-1">Save</button>
                        </form>
                    </div>
                </div>
                <div class="card-body">
                    <div class="row">
                        <!-- Product Name -->
                        <div class="col-5">
                            <div class="form-floating mt-2">
                                <input type="text"
                                       class="form-control"
                                       id="productName"
                                       placeholder="Product Name">
                                <label for="productName">Product Name</label>
                                <p class="invalid" id="productNameError"></p>
                            </div>
                        </div>
                        <div class="col-7"></div>
                    </div>
                    <div class="row">
                        <!-- Description -->
                        <div class="col-11 mb-3">
                            <div class="form-floating mt-2">
                                <textarea class="form-control"
                                          id="description"
                                          rows="3"
                                          placeholder="Enter Product Description here..."></textarea>
                                <label for="description">Product Description</label>
                            </div>
                        </div>
                        <div class="col-1"></div>
                    </div>
                    <hr />
                    <div class="row">
                        <!-- Category -->
                        <div class="col-5">
                            <div class="form-floating mt-2">
                                <select id="category" class="form-select">
                                    <option value="-1" selected>Select category</option>
                                    @foreach (var lookup in Model.Lookups)
                                    {
                                        if (lookup.Category == "Product_Category")
                                        {
                                            <option value="@lookup.ID">@lookup.Value</option>
                                        }
                                    }
                                </select>
                                <label for="category">Category</label>
                                <p class="invalid" id="categoryError"></p>
                            </div>
                        </div>
                        <!-- Manufacturers -->
                        <div class="col-6">
                            <div class="form-floating mt-2">
                                <select class="form-select" id="manufacturerID">
                                    <option value="-1" selected>Select Manufacturer</option>
                                    @foreach (var manufact in Model.Manufacturers)
                                    {
                                        <option value="@manufact.ID">@manufact.Name</option>
                                    }
                                </select>
                                <label for="manufacturerID">Manufacturer</label>
                                <p class="invalid" id="manufacturerIdError"></p>
                            </div>
                        </div>
                        <!-- Add Manufaturer Button -->
                        <div class="col-1 text-end d-flex align-items-center"
                             style="height: 100%">
                            <a class="btn btn-lg btn-primary">
                                <i class="bi bi-plus"></i>
                            </a>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-5">
                            <!-- Sale Price -->
                            <div class="form-floating mt-2">
                                <input type="number"
                                       class="form-control"
                                       id="salePrice"
                                       placeholder="Sale Price"
                                       value="0.00"
                                       min="1.00"
                                       oninput="validity.valid||(value='');" />
                                <label for="salePrice">Sale Price</label>
                                <p class="invalid" id="salePriceError"></p>
                            </div>
                        </div>
                        <div class="col-6">
                            <div class="form-floating mt-2">
                                <!-- Image -->
                                <input type="file"
                                       class="form-control"
                                       id="img"
                                       placeholder="Select Image"
                                       accept="image/*" />
                                <label for="img">Image</label>
                                <p class="invalid" id="imageError"></p>

                            </div>
                        </div>
                        <div class="col-1">
                            <button class="btn btn-lg btn-primary" onclick="addRow()">Add</button>
                        </div>
                    </div>
                    <div class="row mt-4">
                        <div class="col">
                            <div class="table-responsive">
                                <table id="addProductsTable"
                                       class="table table-hover table-striped table-bordered text-center">
                                    <thead class="table-dark">
                                        <tr>
                                            <th scope="col">#</th>
                                            <th scope="col">Product</th>
                                            <th scope="col">Category</th>
                                            <th scope="col">Manufacturer</th>
                                            <th scope="col">Sale Price</th>
                                            <th scope="col">Actions</th>
                                        </tr>
                                    </thead>
                                    <tbody class="table-group-divider">
                                        <!-- Will be loaded later -->
                                    </tbody>
                                </table>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</section>

<!-- View Product Modal -->
<div class="modal fade" id="ViewProductModal" data-bs-backdrop="static" data-bs-keyboard="false" tabindex="-1" aria-labelledby="staticBackdropLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <form>
                <!-- Header -->
                <div class="modal-header">
                    <h5 class="modal-title" id="staticBackdropLabel"><i class="bi bi-eye"></i> View Product</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <!-- Body -->
                <div class="modal-body">
                    <div class="card mb-3">
                        <div class="row g-0">
                            <!-- Product Image -->
                            <div class="col-4">
                                <img id="vImage" class="img-fluid rounded-start" alt="Product">
                            </div>
                            <!-- Product Name and Description -->
                            <div class="col-8">
                                <div class="card-body">
                                    <h5 class="card-title"><b id="vProductName"></b></h5>
                                    <p class="card-text" id="vDescription"></p>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </form>
        </div>
    </div>
</div>


<!-- Add Manufacturer Modal -->
<div class="modal fade" id="createManufacturerModal" data-bs-backdrop="static" data-bs-keyboard="false" tabindex="-1"
    aria-labelledby="staticBackdropLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <form method="post" asp-page-handler="AddManufacturer">

                <div class="modal-header">
                    <h5 class="modal-title" id="staticBackdropLabel"><i class="bi bi-plus"></i>Add Manufacturer</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>

                <div class="modal-body">
                    <div class="row">
                        <div class="col-md-6">
                            <!-- Name -->
                            <div class="form-floating mt-2">
                                <input type="text" class="form-control" id="name" placeholder="Name"
                                    asp-for="manufacturer.Name" />
                                <label for="name">Name</label>
                                <p class="invalid" id="nameError"></p>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <!-- Contact -->
                            <div class="form-floating mt-2">
                                <input type="tel" class="form-control" id="Contact" placeholder="Contact"
                                    asp-for="manufacturer.Contact" />
                                <label for="Contact">Contact</label>
                                <p class="invalid" id="contactError"></p>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <!-- Address -->
                            <div class="form-floating mt-2">
                                <input type="text" class="form-control" id="Address" placeholder="Address"
                                    asp-for="manufacturer.StreetAddress" />
                                <label for="Address">Address</label>
                                <p class="invalid" id="addressError"></p>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <!-- City -->
                            <div class="form-floating mt-2">
                                <select class="form-select" id="City" aria-label="Default select example"
                                    asp-for="manufacturer.City">
                                    <option value="-1" selected>Select City</option>
                                    @foreach (var city in Model.Cities)
                                    {
                                        <option value="@city">@city</option>
                                    }
                                </select>
                                <label for="City">City</label>
                                <p class="invalid" id="cityError"></p>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <!-- Province -->
                            <div class="form-floating mt-2">
                                <select class="form-select" id="Province" aria-label="Default select example"
                                    asp-for="manufacturer.Province">
                                    <option value="-1" selected>Select Province</option>
                                    @foreach (var province in Model.Provinces)
                                    {
                                        <option value="@province">@province</option>
                                    }
                                </select>
                                <label for="Province">Province</label>
                                <p class="invalid" id="provinceError"></p>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <!-- Country -->
                            <div class="form-floating mt-2">
                                <select class="form-select" id="Country" aria-label="Default select example"
                                    asp-for="manufacturer.Country">
                                    <option value="-1" selected>Select Country</option>
                                    <option value="Pakistan">Pakistan</option>
                                </select>
                                <label for="Country">Country</label>
                                <p class="invalid" id="countryError"></p>
                            </div>
                        </div>
                    </div>
                </div>

                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                    <button type="submit" class="btn btn-primary" id="addBtn" disabled>Add</button>
                </div>
            </form>
        </div>
    </div>
</div>


<!-- JAVASCRIPT SECTION -->
@section Scripts {
    <script>
        // Document ready function to initialize DataTable
        $(document).ready(function () {
            var table = $('#addProductsTable').DataTable({
                paging: true,
                lengthChange: false,
                searching: false,
                ordering: true,
                info: true,
                autoWidth: false,
                language: {
                    emptyTable: "No data available",
                    info: "Showing _START_ to _END_ of _TOTAL_ entries",
                    infoEmpty: "Showing 0 to 0 of 0 entries",
                    infoFiltered: "(filtered from _MAX_ total entries)",
                    zeroRecords: "No matching records found",
                    search: "Search:",
                }
            });
        });

        // Function to display product details in a modal
        function ViewProduct(img, name, descr) {
            document.getElementById("vImage").src = img;
            document.getElementById("vProductName").textContent = name;
            document.getElementById("vDescription").textContent = descr;
        }

        // Function to check input fields for validation
        function validateInput() {
            var productName = document.querySelector("#productName");
            var manufacturerID = document.querySelector("#manufacturerID");
            var salePrice = document.querySelector("#salePrice");
            var category = document.querySelector("#category");

            var errors = false;

            if (productName.value.trim() === "") {
                showError(productName, "#productNameError", "Product Name is required");
                errors = true;
            } else {
                hideError(productName, "#productNameError");
            }

            if (manufacturerID.value == -1) {
                showError(manufacturerID, "#manufacturerIdError", "Manufacturer ID is required");
                errors = true;
            } else {
                hideError(manufacturerID, "#manufacturerIdError");
            }

            if (salePrice.value.trim() === "") {
                showError(salePrice, "#salePriceError", "Sale Price is required");
                errors = true;
            } else {
                hideError(salePrice, "#salePriceError");
            }

            if (category.value == -1) {
                showError(category, "#categoryError", "Category is required");
                errors = true;
            } else {
                hideError(category, "#categoryError");
            }

            return errors;
        }

        // Function to display error message for input field
        function showError(inputField, errorFieldSelector, errorMessage) {
            var errorField = document.querySelector(errorFieldSelector);
            errorField.textContent = errorMessage;
            errorField.style.display = 'block';
            inputField.classList.add("is-invalid");
        }

        // Function to hide error message for input field
        function hideError(inputField, errorFieldSelector) {
            var errorField = document.querySelector(errorFieldSelector);
            errorField.textContent = "";
            errorField.style.display = 'none';
            inputField.classList.remove("is-invalid");
        }

        // Variables to store lookup data and manufacturer data
        var lookups = @Html.Raw(Json.Serialize(Model.Lookups));
        var manufacturers = @Html.Raw(Json.Serialize(Model.Manufacturers));
        var categorylist = null;

        // Function to add a new row to the DataTable
        function addRow() {
            // Check input fields for validation
            if (validateInput()) {
                alert("All required fields must be filled.");
                return;
            }

            //disable name and description fields
            document.querySelector("#productName").disabled = true;
            document.querySelector("#description").disabled = true;

            // Get input values
            var productName = document.querySelector("#productName").value;
            var manufacturerID = document.querySelector("#manufacturerID").value;
            var salePrice = document.querySelector("#salePrice").value;
            var category = document.querySelector("#category").value;
            var ImagePath = document.querySelector("#img").value;
            var description = document.querySelector("#description").value;

            // Initialize DataTable
            var table = $('#addProductsTable').DataTable();

            // Initialize categorylist array if null
            if (categorylist === null) {
                categorylist = [];
            }

            // Get category value and manufacturer name
            var categoryValue = lookups.find(l => l.id == category).value;
            var manufacturerName = manufacturers.find(m => m.id == manufacturerID).name;

            // Check if product already exists in the list
            var existingRowIndex = categorylist.findIndex(function (item) {
                return item.category === category;
            });

            if (existingRowIndex !== -1) {
                alert("Product already exists in the list");
            } else {
                // Add product to categorylist array
                categorylist.push({
                    id: -1,
                    productId: -1,
                    manufacturerId: parseInt(manufacturerID),
                    inventoryId: -1,
                    salePrice: parseFloat(salePrice),
                    image: ImagePath,
                    category: category,
                    isDeleted: false
                });

                // Add new row to DataTable
                var newRow = [
                    table.rows().count() + 1,
                    productName,
                    categoryValue,
                    manufacturerName,
                    salePrice,
                    '<button type="button" class="btn btn-sm btn-danger" onclick="deleteRow(this)"><i class="bi bi-trash"></i></button>'
                ];
                table.row.add(newRow).draw(false);
            }
        }

        // Function to delete a row from the DataTable
        function deleteRow(button) {
            var table = $('#addProductsTable').DataTable();
            var row = table.row($(button).parents('tr'));
            var rowData = row.data();

            // Find the index of the row in the DataTable
            var rowIndex = row.index();

            // Remove the row from the DataTable
            row.remove().draw();

            // Find the corresponding item in the categorylist array
            var categoryIndex = categorylist.findIndex(function (item) {
                var categoryValue = lookups.find(l => l.id == item.category).value;
                return categoryValue === rowData[2];
            });

            // Remove the item from the categorylist array
            if (categoryIndex !== -1) {
                categorylist.splice(categoryIndex, 1);
            }
        }

        // Function to add product details to hidden fields before form submission
        function addProduct() {
            var product = {
                id: -1,
                productName: document.querySelector("#productName").value,
                productDescription: document.querySelector("#description").value
            }
            var sProduct = JSON.stringify(product);
            var sCategory = JSON.stringify(categorylist);

            document.querySelector("#Product").value = sProduct;
            document.querySelector("#ProductCategory").value = sCategory;
        }
        function validateAndSubmit() {
            // Check if categorylist count is greater than 0
            if (categorylist && categorylist.length > 0) {
                // If categorylist count is greater than 0, validate input fields
                if (validateInput()) {
                    alert("All required fields must be filled.");
                    return false; // Prevent form submission
                } else {
                    // If input fields are valid, add product details to hidden fields
                    addProduct();
                    return true; // Allow form submission
                }
            } else {
                // If categorylist count is not greater than 0, show an alert
                alert("Please add at least one product.");
                return false; // Prevent form submission
            }
        }
    </script>

}
